package com.ja.visitor_reg.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ja.visitor_reg.entity.VisitEventEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VisitEvent_Table".
*/
public class VisitEventEntityDao extends AbstractDao<VisitEventEntity, Long> {

    public static final String TABLENAME = "VisitEvent_Table";

    /**
     * Properties of entity VisitEventEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CauseId = new Property(1, Long.class, "causeId", false, "CAUSE_ID");
        public final static Property IntervieweeId = new Property(2, Long.class, "intervieweeId", false, "INTERVIEWEE_ID");
        public final static Property ShifitId = new Property(3, Long.class, "shifitId", false, "SHIFIT_ID");
        public final static Property DeviceId = new Property(4, Long.class, "deviceId", false, "DEVICE_ID");
        public final static Property VisitorCount = new Property(5, Integer.class, "visitorCount", false, "VISITOR_COUNT");
        public final static Property InsetTime = new Property(6, java.util.Date.class, "insetTime", false, "INSET_TIME");
        public final static Property Is_upload = new Property(7, Integer.class, "is_upload", false, "IS_UPLOAD");
    }


    public VisitEventEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VisitEventEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VisitEvent_Table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CAUSE_ID\" INTEGER," + // 1: causeId
                "\"INTERVIEWEE_ID\" INTEGER," + // 2: intervieweeId
                "\"SHIFIT_ID\" INTEGER," + // 3: shifitId
                "\"DEVICE_ID\" INTEGER," + // 4: deviceId
                "\"VISITOR_COUNT\" INTEGER," + // 5: visitorCount
                "\"INSET_TIME\" INTEGER," + // 6: insetTime
                "\"IS_UPLOAD\" INTEGER);"); // 7: is_upload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VisitEvent_Table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VisitEventEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long causeId = entity.getCauseId();
        if (causeId != null) {
            stmt.bindLong(2, causeId);
        }
 
        Long intervieweeId = entity.getIntervieweeId();
        if (intervieweeId != null) {
            stmt.bindLong(3, intervieweeId);
        }
 
        Long shifitId = entity.getShifitId();
        if (shifitId != null) {
            stmt.bindLong(4, shifitId);
        }
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(5, deviceId);
        }
 
        Integer visitorCount = entity.getVisitorCount();
        if (visitorCount != null) {
            stmt.bindLong(6, visitorCount);
        }
 
        java.util.Date insetTime = entity.getInsetTime();
        if (insetTime != null) {
            stmt.bindLong(7, insetTime.getTime());
        }
 
        Integer is_upload = entity.getIs_upload();
        if (is_upload != null) {
            stmt.bindLong(8, is_upload);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VisitEventEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long causeId = entity.getCauseId();
        if (causeId != null) {
            stmt.bindLong(2, causeId);
        }
 
        Long intervieweeId = entity.getIntervieweeId();
        if (intervieweeId != null) {
            stmt.bindLong(3, intervieweeId);
        }
 
        Long shifitId = entity.getShifitId();
        if (shifitId != null) {
            stmt.bindLong(4, shifitId);
        }
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(5, deviceId);
        }
 
        Integer visitorCount = entity.getVisitorCount();
        if (visitorCount != null) {
            stmt.bindLong(6, visitorCount);
        }
 
        java.util.Date insetTime = entity.getInsetTime();
        if (insetTime != null) {
            stmt.bindLong(7, insetTime.getTime());
        }
 
        Integer is_upload = entity.getIs_upload();
        if (is_upload != null) {
            stmt.bindLong(8, is_upload);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VisitEventEntity readEntity(Cursor cursor, int offset) {
        VisitEventEntity entity = new VisitEventEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // causeId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // intervieweeId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // shifitId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // deviceId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // visitorCount
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // insetTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // is_upload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VisitEventEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCauseId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIntervieweeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setShifitId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDeviceId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setVisitorCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setInsetTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setIs_upload(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VisitEventEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VisitEventEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VisitEventEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
