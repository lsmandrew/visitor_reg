package com.ja.visitor_reg.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ja.visitor_reg.entity.VisitEventEntity;

import com.ja.visitor_reg.entity.VisitInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VisitInfo_Table".
*/
public class VisitInfoEntityDao extends AbstractDao<VisitInfoEntity, Long> {

    public static final String TABLENAME = "VisitInfo_Table";

    /**
     * Properties of entity VisitInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Visit_event_id = new Property(1, Long.class, "visit_event_id", false, "VISIT_EVENT_ID");
        public final static Property Server_id = new Property(2, Long.class, "server_id", false, "SERVER_ID");
        public final static Property Visitor_name = new Property(3, String.class, "visitor_name", false, "VISITOR_NAME");
        public final static Property Sex_type = new Property(4, String.class, "sex_type", false, "SEX_TYPE");
        public final static Property Birthday = new Property(5, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property Adress = new Property(6, String.class, "adress", false, "ADRESS");
        public final static Property Nation = new Property(7, String.class, "nation", false, "NATION");
        public final static Property Cert_type = new Property(8, String.class, "cert_type", false, "CERT_TYPE");
        public final static Property Id_numer = new Property(9, String.class, "id_numer", false, "ID_NUMER");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property Company = new Property(11, String.class, "company", false, "COMPANY");
        public final static Property Goods = new Property(12, String.class, "goods", false, "GOODS");
        public final static Property Car_number = new Property(13, String.class, "car_number", false, "CAR_NUMBER");
        public final static Property Img_head = new Property(14, String.class, "img_head", false, "IMG_HEAD");
        public final static Property Img_cert = new Property(15, String.class, "img_cert", false, "IMG_CERT");
        public final static Property Img_portrait = new Property(16, String.class, "img_portrait", false, "IMG_PORTRAIT");
        public final static Property Img_scan = new Property(17, String.class, "img_scan", false, "IMG_SCAN");
        public final static Property Img_goods = new Property(18, String.class, "img_goods", false, "IMG_GOODS");
        public final static Property Ic_number = new Property(19, String.class, "ic_number", false, "IC_NUMBER");
        public final static Property Physics_number = new Property(20, String.class, "physics_number", false, "PHYSICS_NUMBER");
        public final static Property In_time = new Property(21, java.util.Date.class, "in_time", false, "IN_TIME");
        public final static Property Out_time = new Property(22, java.util.Date.class, "out_time", false, "OUT_TIME");
        public final static Property System_id = new Property(23, String.class, "system_id", false, "SYSTEM_ID");
        public final static Property Is_upload_in = new Property(24, Integer.class, "is_upload_in", false, "IS_UPLOAD_IN");
        public final static Property Is_upload_out = new Property(25, Integer.class, "is_upload_out", false, "IS_UPLOAD_OUT");
        public final static Property Is_upload_img = new Property(26, Integer.class, "is_upload_img", false, "IS_UPLOAD_IMG");
    }

    private DaoSession daoSession;


    public VisitInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public VisitInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VisitInfo_Table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VISIT_EVENT_ID\" INTEGER," + // 1: visit_event_id
                "\"SERVER_ID\" INTEGER," + // 2: server_id
                "\"VISITOR_NAME\" TEXT," + // 3: visitor_name
                "\"SEX_TYPE\" TEXT," + // 4: sex_type
                "\"BIRTHDAY\" INTEGER," + // 5: birthday
                "\"ADRESS\" TEXT," + // 6: adress
                "\"NATION\" TEXT," + // 7: nation
                "\"CERT_TYPE\" TEXT," + // 8: cert_type
                "\"ID_NUMER\" TEXT," + // 9: id_numer
                "\"PHONE\" TEXT," + // 10: phone
                "\"COMPANY\" TEXT," + // 11: company
                "\"GOODS\" TEXT," + // 12: goods
                "\"CAR_NUMBER\" TEXT," + // 13: car_number
                "\"IMG_HEAD\" TEXT," + // 14: img_head
                "\"IMG_CERT\" TEXT," + // 15: img_cert
                "\"IMG_PORTRAIT\" TEXT," + // 16: img_portrait
                "\"IMG_SCAN\" TEXT," + // 17: img_scan
                "\"IMG_GOODS\" TEXT," + // 18: img_goods
                "\"IC_NUMBER\" TEXT," + // 19: ic_number
                "\"PHYSICS_NUMBER\" TEXT," + // 20: physics_number
                "\"IN_TIME\" INTEGER," + // 21: in_time
                "\"OUT_TIME\" INTEGER," + // 22: out_time
                "\"SYSTEM_ID\" TEXT," + // 23: system_id
                "\"IS_UPLOAD_IN\" INTEGER," + // 24: is_upload_in
                "\"IS_UPLOAD_OUT\" INTEGER," + // 25: is_upload_out
                "\"IS_UPLOAD_IMG\" INTEGER);"); // 26: is_upload_img
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VisitInfo_Table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VisitInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long visit_event_id = entity.getVisit_event_id();
        if (visit_event_id != null) {
            stmt.bindLong(2, visit_event_id);
        }
 
        Long server_id = entity.getServer_id();
        if (server_id != null) {
            stmt.bindLong(3, server_id);
        }
 
        String visitor_name = entity.getVisitor_name();
        if (visitor_name != null) {
            stmt.bindString(4, visitor_name);
        }
 
        String sex_type = entity.getSex_type();
        if (sex_type != null) {
            stmt.bindString(5, sex_type);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday.getTime());
        }
 
        String adress = entity.getAdress();
        if (adress != null) {
            stmt.bindString(7, adress);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(8, nation);
        }
 
        String cert_type = entity.getCert_type();
        if (cert_type != null) {
            stmt.bindString(9, cert_type);
        }
 
        String id_numer = entity.getId_numer();
        if (id_numer != null) {
            stmt.bindString(10, id_numer);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(12, company);
        }
 
        String goods = entity.getGoods();
        if (goods != null) {
            stmt.bindString(13, goods);
        }
 
        String car_number = entity.getCar_number();
        if (car_number != null) {
            stmt.bindString(14, car_number);
        }
 
        String img_head = entity.getImg_head();
        if (img_head != null) {
            stmt.bindString(15, img_head);
        }
 
        String img_cert = entity.getImg_cert();
        if (img_cert != null) {
            stmt.bindString(16, img_cert);
        }
 
        String img_portrait = entity.getImg_portrait();
        if (img_portrait != null) {
            stmt.bindString(17, img_portrait);
        }
 
        String img_scan = entity.getImg_scan();
        if (img_scan != null) {
            stmt.bindString(18, img_scan);
        }
 
        String img_goods = entity.getImg_goods();
        if (img_goods != null) {
            stmt.bindString(19, img_goods);
        }
 
        String ic_number = entity.getIc_number();
        if (ic_number != null) {
            stmt.bindString(20, ic_number);
        }
 
        String physics_number = entity.getPhysics_number();
        if (physics_number != null) {
            stmt.bindString(21, physics_number);
        }
 
        java.util.Date in_time = entity.getIn_time();
        if (in_time != null) {
            stmt.bindLong(22, in_time.getTime());
        }
 
        java.util.Date out_time = entity.getOut_time();
        if (out_time != null) {
            stmt.bindLong(23, out_time.getTime());
        }
 
        String system_id = entity.getSystem_id();
        if (system_id != null) {
            stmt.bindString(24, system_id);
        }
 
        Integer is_upload_in = entity.getIs_upload_in();
        if (is_upload_in != null) {
            stmt.bindLong(25, is_upload_in);
        }
 
        Integer is_upload_out = entity.getIs_upload_out();
        if (is_upload_out != null) {
            stmt.bindLong(26, is_upload_out);
        }
 
        Integer is_upload_img = entity.getIs_upload_img();
        if (is_upload_img != null) {
            stmt.bindLong(27, is_upload_img);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VisitInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long visit_event_id = entity.getVisit_event_id();
        if (visit_event_id != null) {
            stmt.bindLong(2, visit_event_id);
        }
 
        Long server_id = entity.getServer_id();
        if (server_id != null) {
            stmt.bindLong(3, server_id);
        }
 
        String visitor_name = entity.getVisitor_name();
        if (visitor_name != null) {
            stmt.bindString(4, visitor_name);
        }
 
        String sex_type = entity.getSex_type();
        if (sex_type != null) {
            stmt.bindString(5, sex_type);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday.getTime());
        }
 
        String adress = entity.getAdress();
        if (adress != null) {
            stmt.bindString(7, adress);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(8, nation);
        }
 
        String cert_type = entity.getCert_type();
        if (cert_type != null) {
            stmt.bindString(9, cert_type);
        }
 
        String id_numer = entity.getId_numer();
        if (id_numer != null) {
            stmt.bindString(10, id_numer);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(12, company);
        }
 
        String goods = entity.getGoods();
        if (goods != null) {
            stmt.bindString(13, goods);
        }
 
        String car_number = entity.getCar_number();
        if (car_number != null) {
            stmt.bindString(14, car_number);
        }
 
        String img_head = entity.getImg_head();
        if (img_head != null) {
            stmt.bindString(15, img_head);
        }
 
        String img_cert = entity.getImg_cert();
        if (img_cert != null) {
            stmt.bindString(16, img_cert);
        }
 
        String img_portrait = entity.getImg_portrait();
        if (img_portrait != null) {
            stmt.bindString(17, img_portrait);
        }
 
        String img_scan = entity.getImg_scan();
        if (img_scan != null) {
            stmt.bindString(18, img_scan);
        }
 
        String img_goods = entity.getImg_goods();
        if (img_goods != null) {
            stmt.bindString(19, img_goods);
        }
 
        String ic_number = entity.getIc_number();
        if (ic_number != null) {
            stmt.bindString(20, ic_number);
        }
 
        String physics_number = entity.getPhysics_number();
        if (physics_number != null) {
            stmt.bindString(21, physics_number);
        }
 
        java.util.Date in_time = entity.getIn_time();
        if (in_time != null) {
            stmt.bindLong(22, in_time.getTime());
        }
 
        java.util.Date out_time = entity.getOut_time();
        if (out_time != null) {
            stmt.bindLong(23, out_time.getTime());
        }
 
        String system_id = entity.getSystem_id();
        if (system_id != null) {
            stmt.bindString(24, system_id);
        }
 
        Integer is_upload_in = entity.getIs_upload_in();
        if (is_upload_in != null) {
            stmt.bindLong(25, is_upload_in);
        }
 
        Integer is_upload_out = entity.getIs_upload_out();
        if (is_upload_out != null) {
            stmt.bindLong(26, is_upload_out);
        }
 
        Integer is_upload_img = entity.getIs_upload_img();
        if (is_upload_img != null) {
            stmt.bindLong(27, is_upload_img);
        }
    }

    @Override
    protected final void attachEntity(VisitInfoEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VisitInfoEntity readEntity(Cursor cursor, int offset) {
        VisitInfoEntity entity = new VisitInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // visit_event_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // server_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // visitor_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex_type
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // birthday
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // adress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cert_type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // id_numer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // company
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // goods
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // car_number
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // img_head
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // img_cert
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // img_portrait
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // img_scan
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // img_goods
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ic_number
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // physics_number
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // in_time
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // out_time
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // system_id
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // is_upload_in
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // is_upload_out
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26) // is_upload_img
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VisitInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVisit_event_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setServer_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setVisitor_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setAdress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCert_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setId_numer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCompany(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGoods(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCar_number(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImg_head(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImg_cert(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setImg_portrait(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setImg_scan(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setImg_goods(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIc_number(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPhysics_number(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIn_time(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setOut_time(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setSystem_id(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIs_upload_in(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIs_upload_out(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setIs_upload_img(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VisitInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VisitInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VisitInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getVisitEventEntityDao().getAllColumns());
            builder.append(" FROM VisitInfo_Table T");
            builder.append(" LEFT JOIN VisitEvent_Table T0 ON T.\"VISIT_EVENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected VisitInfoEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        VisitInfoEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        VisitEventEntity visitEvent = loadCurrentOther(daoSession.getVisitEventEntityDao(), cursor, offset);
        entity.setVisitEvent(visitEvent);

        return entity;    
    }

    public VisitInfoEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<VisitInfoEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<VisitInfoEntity> list = new ArrayList<VisitInfoEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<VisitInfoEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<VisitInfoEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
